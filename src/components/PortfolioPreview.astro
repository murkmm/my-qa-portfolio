---
import type { CollectionEntry } from 'astro:content';

interface Props {
	project: CollectionEntry<'work'>;
}

const { data, id } = Astro.props.project;
---

<a class="card" href={`/work/${id}`}>
	<img src={data.img} alt={data.img_alt || ''} loading="lazy" decoding="async" />

	<div class="text-overlay">
		<h3 class="title">{data.title}</h3>
		{
			data.summary && (
				<ul class="summary">
					{data.summary.map((point) => (
						<li>{point}</li>
					))}
				</ul>
			)
		}
	</div>
</a>

<script>
	// This script runs for all project cards on the page
	document.addEventListener('DOMContentLoaded', () => {
		const cards = document.querySelectorAll<HTMLAnchorElement>('.card');

		cards.forEach((card) => {
			card.addEventListener('click', function (event) {
				// We only run this logic on touch-enabled devices
				const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
				if (!isTouchDevice) {
					return;
				}

				// If this card is already active, let the link work normally
				if (this.classList.contains('is-active')) {
					return;
				}

				// If any other card is active, remove its active state
				cards.forEach((c) => {
					if (c !== this) {
						c.classList.remove('is-active');
					}
				});

				// It's the first tap: prevent the link, and make this card active
				event.preventDefault();
				this.classList.add('is-active');
			});
		});

		// Optional: if a user taps outside of any card, close all of them
		document.addEventListener('click', function (event) {
			if (!(event.target as HTMLElement).closest('.card')) {
				cards.forEach((card) => card.classList.remove('is-active'));
			}
		});
	});
</script>

<style>
	.card {
		position: relative; /* This is crucial for the overlay positioning */
		display: block; /* Simpler than grid for this layout */
		height: 11rem;
		border-radius: 0.75rem;
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		text-decoration: none;
		transition: box-shadow var(--theme-transition);
	}

	.card:hover {
		box-shadow: var(--shadow-md);
	}

	img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		object-position: center center;
		transition: transform 0.4s ease-out;
	}

	/* --- NEW OVERLAY STYLES --- */
	.text-overlay {
		position: absolute;
		inset: 0; /* Cover the entire card */
		display: flex;
		flex-direction: column;
		justify-content: flex-end; /* Push all content to the bottom */
		padding: 1rem;
		color: white; /* Always use white text on the overlay */
		background: linear-gradient(to top, rgba(9, 11, 17, 0.95) 20%, rgba(9, 11, 17, 0.7) 50%, transparent);
		z-index: 1;
	}

	.title {
		font-family: var(--font-brand);
		font-size: var(--text-lg);
		font-weight: 500;
		color: var(--gray-0);
		margin: 0;
	}

	.summary {
		list-style: none;
		padding: 0;
		margin: 0;
		font-size: var(--text-sm);
		color: var(--gray-300);
		opacity: 0; /* Hidden by default */
		max-height: 0; /* Hidden by default */
		transition: opacity 0.3s ease-out, max-height 0.3s ease-out;
	}

	.summary li {
		white-space: normal;
		overflow-wrap: break-word;
		padding-top: 0.5rem;
	}

	/* --- HOVER AND ACTIVE STATES --- */
	.card:hover img,
	.card.is-active img {
		transform: scale(1.1);
	}

	/* Show the summary on hover or when active */
	.card:hover .summary,
	.card.is-active .summary {
		opacity: 1;
		max-height: 10em; /* Give it space to expand */
		margin-top: 0.5rem;
	}

	@media (min-width: 50em) {
		.card {
			height: 22rem;
			border-radius: 1.5rem;
		}

		.title {
			font-size: var(--text-xl);
		}
	}
</style>